/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IAccountsClient {
    registerUser(userForRegistration: UserForRegistrationDto): Observable<FileResponse | null>;
    login(userForAuthentication: UserForAuthenticationDto): Observable<FileResponse | null>;
}

@Injectable({
    providedIn: 'root'
})
export class AccountsClient implements IAccountsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
    }

    registerUser(userForRegistration: UserForRegistrationDto): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/accounts/Registration";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userForRegistration);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegisterUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegisterUser(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processRegisterUser(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    login(userForAuthentication: UserForAuthenticationDto): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/accounts/Login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userForAuthentication);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

export interface ICompaniesClient {
    getCompanies(): Observable<FileResponse | null>;
}

@Injectable({
    providedIn: 'root'
})
export class CompaniesClient implements ICompaniesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
    }

    getCompanies(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/companies";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCompanies(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCompanies(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetCompanies(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

export interface IRecipeLogedViewClient {
    getMyList(token: string | null | undefined): Observable<RecipePublicListDto[]>;
    getSomeoneList(id: string | null | undefined): Observable<RecipePublicListDto[]>;
}

@Injectable({
    providedIn: 'root'
})
export class RecipeLogedViewClient implements IRecipeLogedViewClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
    }

    getMyList(token: string | null | undefined): Observable<RecipePublicListDto[]> {
        let url_ = this.baseUrl + "/GetMyList?";
        if (token !== undefined && token !== null)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMyList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMyList(<any>response_);
                } catch (e) {
                    return <Observable<RecipePublicListDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<RecipePublicListDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetMyList(response: HttpResponseBase): Observable<RecipePublicListDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RecipePublicListDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RecipePublicListDto[]>(<any>null);
    }

    getSomeoneList(id: string | null | undefined): Observable<RecipePublicListDto[]> {
        let url_ = this.baseUrl + "/GetSomeoneList?";
        if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSomeoneList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSomeoneList(<any>response_);
                } catch (e) {
                    return <Observable<RecipePublicListDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<RecipePublicListDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetSomeoneList(response: HttpResponseBase): Observable<RecipePublicListDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RecipePublicListDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RecipePublicListDto[]>(<any>null);
    }
}

export interface IRecipesClient {
    getRecipes(): Observable<RecipePublicListDto[]>;
    getRecipe(id: string): Observable<RecipeDto>;
    getRandomRecipe(): Observable<RecipeDto>;
}

@Injectable({
    providedIn: 'root'
})
export class RecipesClient implements IRecipesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
    }

    getRecipes(): Observable<RecipePublicListDto[]> {
        let url_ = this.baseUrl + "/api/recips";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRecipes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRecipes(<any>response_);
                } catch (e) {
                    return <Observable<RecipePublicListDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<RecipePublicListDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetRecipes(response: HttpResponseBase): Observable<RecipePublicListDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RecipePublicListDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RecipePublicListDto[]>(<any>null);
    }

    getRecipe(id: string): Observable<RecipeDto> {
        let url_ = this.baseUrl + "/api/recips/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRecipe(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRecipe(<any>response_);
                } catch (e) {
                    return <Observable<RecipeDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<RecipeDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRecipe(response: HttpResponseBase): Observable<RecipeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RecipeDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RecipeDto>(<any>null);
    }

    getRandomRecipe(): Observable<RecipeDto> {
        let url_ = this.baseUrl + "/api/recips/Random";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRandomRecipe(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRandomRecipe(<any>response_);
                } catch (e) {
                    return <Observable<RecipeDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<RecipeDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRandomRecipe(response: HttpResponseBase): Observable<RecipeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RecipeDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RecipeDto>(<any>null);
    }
}

export interface IRecipesLogedClient {
    createRecipe(token: string | null | undefined): Observable<FileResponse | null>;
    deleteConfirmed(recipId: string | undefined, token: string | null | undefined): Observable<FileResponse | null>;
    uploadMultiples(updateRecipe: UpdateRecipe | null | undefined, file: FileParameter[] | null | undefined): Observable<FileResponse | null>;
    rateRecipe(token: string | null | undefined, userId: string | null | undefined, recipeId: string | undefined, rating: number | undefined): Observable<FileResponse | null>;
    addToMyList(recipeId: string | undefined, token: string | null | undefined): Observable<FileResponse | null>;
}

@Injectable({
    providedIn: 'root'
})
export class RecipesLogedClient implements IRecipesLogedClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
    }

    createRecipe(token: string | null | undefined): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/Add?";
        if (token !== undefined && token !== null)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateRecipe(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateRecipe(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processCreateRecipe(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    deleteConfirmed(recipId: string | undefined, token: string | null | undefined): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/delete?";
        if (recipId === null)
            throw new Error("The parameter 'recipId' cannot be null.");
        else if (recipId !== undefined)
            url_ += "RecipId=" + encodeURIComponent("" + recipId) + "&";
        if (token !== undefined && token !== null)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteConfirmed(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteConfirmed(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteConfirmed(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    uploadMultiples(updateRecipe: UpdateRecipe | null | undefined, file: FileParameter[] | null | undefined): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/upload?";
        if (updateRecipe !== undefined && updateRecipe !== null)
            url_ += "updateRecipe=" + encodeURIComponent("" + updateRecipe) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file !== null && file !== undefined)
            file.forEach(item_ => content_.append("file", item_.data, item_.fileName ? item_.fileName : "file") );

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUploadMultiples(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadMultiples(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processUploadMultiples(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    rateRecipe(token: string | null | undefined, userId: string | null | undefined, recipeId: string | undefined, rating: number | undefined): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/rate?";
        if (token !== undefined && token !== null)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        if (userId !== undefined && userId !== null)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (recipeId === null)
            throw new Error("The parameter 'recipeId' cannot be null.");
        else if (recipeId !== undefined)
            url_ += "RecipeId=" + encodeURIComponent("" + recipeId) + "&";
        if (rating === null)
            throw new Error("The parameter 'rating' cannot be null.");
        else if (rating !== undefined)
            url_ += "Rating=" + encodeURIComponent("" + rating) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRateRecipe(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRateRecipe(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processRateRecipe(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    addToMyList(recipeId: string | undefined, token: string | null | undefined): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/addToMyList?";
        if (recipeId === null)
            throw new Error("The parameter 'recipeId' cannot be null.");
        else if (recipeId !== undefined)
            url_ += "recipeId=" + encodeURIComponent("" + recipeId) + "&";
        if (token !== undefined && token !== null)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddToMyList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddToMyList(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processAddToMyList(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

export interface IWeatherForecastClient {
    get(): Observable<string[]>;
}

@Injectable({
    providedIn: 'root'
})
export class WeatherForecastClient implements IWeatherForecastClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
    }

    get(): Observable<string[]> {
        let url_ = this.baseUrl + "/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<string[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<string[]>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<string[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string[]>(<any>null);
    }
}

export class UserForRegistrationDto implements IUserForRegistrationDto {
    firstName?: string | undefined;
    lastName?: string | undefined;
    email!: string;
    password!: string;
    confirmPassword?: string | undefined;

    constructor(data?: IUserForRegistrationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.password = _data["password"];
            this.confirmPassword = _data["confirmPassword"];
        }
    }

    static fromJS(data: any): UserForRegistrationDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserForRegistrationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["password"] = this.password;
        data["confirmPassword"] = this.confirmPassword;
        return data;
    }
}

export interface IUserForRegistrationDto {
    firstName?: string | undefined;
    lastName?: string | undefined;
    email: string;
    password: string;
    confirmPassword?: string | undefined;
}

export class UserForAuthenticationDto implements IUserForAuthenticationDto {
    email!: string;
    password!: string;

    constructor(data?: IUserForAuthenticationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): UserForAuthenticationDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserForAuthenticationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface IUserForAuthenticationDto {
    email: string;
    password: string;
}

export class RecipePublicListDto implements IRecipePublicListDto {
    id!: string;
    photo?: string | undefined;
    userId?: string | undefined;
    date!: Date;
    rating!: number;
    recipeName?: string | undefined;

    constructor(data?: IRecipePublicListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.photo = _data["photo"];
            this.userId = _data["userId"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.rating = _data["rating"];
            this.recipeName = _data["recipeName"];
        }
    }

    static fromJS(data: any): RecipePublicListDto {
        data = typeof data === 'object' ? data : {};
        let result = new RecipePublicListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["photo"] = this.photo;
        data["userId"] = this.userId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["rating"] = this.rating;
        data["recipeName"] = this.recipeName;
        return data;
    }
}

export interface IRecipePublicListDto {
    id: string;
    photo?: string | undefined;
    userId?: string | undefined;
    date: Date;
    rating: number;
    recipeName?: string | undefined;
}

export class RecipeDto implements IRecipeDto {
    id!: string;
    recipeName?: string | undefined;
    instruction?: string | undefined;
    userId?: string | undefined;
    date!: Date;
    rating!: number;
    gluten!: boolean;
    shellfish!: boolean;
    eggs!: boolean;
    fish!: boolean;
    peanuts!: boolean;
    soy!: boolean;
    lactose!: boolean;
    celery!: boolean;
    mustard!: boolean;
    sesame!: boolean;
    sulphuR_DIOXIDE!: boolean;
    lupine!: boolean;
    muscles!: boolean;
    vegan!: boolean;
    vege!: boolean;
    photo?: string | undefined;
    ingredients?: IndigrentsForRecipeDto[] | undefined;

    constructor(data?: IRecipeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.recipeName = _data["recipeName"];
            this.instruction = _data["instruction"];
            this.userId = _data["userId"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.rating = _data["rating"];
            this.gluten = _data["gluten"];
            this.shellfish = _data["shellfish"];
            this.eggs = _data["eggs"];
            this.fish = _data["fish"];
            this.peanuts = _data["peanuts"];
            this.soy = _data["soy"];
            this.lactose = _data["lactose"];
            this.celery = _data["celery"];
            this.mustard = _data["mustard"];
            this.sesame = _data["sesame"];
            this.sulphuR_DIOXIDE = _data["sulphuR_DIOXIDE"];
            this.lupine = _data["lupine"];
            this.muscles = _data["muscles"];
            this.vegan = _data["vegan"];
            this.vege = _data["vege"];
            this.photo = _data["photo"];
            if (Array.isArray(_data["ingredients"])) {
                this.ingredients = [] as any;
                for (let item of _data["ingredients"])
                    this.ingredients!.push(IndigrentsForRecipeDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RecipeDto {
        data = typeof data === 'object' ? data : {};
        let result = new RecipeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["recipeName"] = this.recipeName;
        data["instruction"] = this.instruction;
        data["userId"] = this.userId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["rating"] = this.rating;
        data["gluten"] = this.gluten;
        data["shellfish"] = this.shellfish;
        data["eggs"] = this.eggs;
        data["fish"] = this.fish;
        data["peanuts"] = this.peanuts;
        data["soy"] = this.soy;
        data["lactose"] = this.lactose;
        data["celery"] = this.celery;
        data["mustard"] = this.mustard;
        data["sesame"] = this.sesame;
        data["sulphuR_DIOXIDE"] = this.sulphuR_DIOXIDE;
        data["lupine"] = this.lupine;
        data["muscles"] = this.muscles;
        data["vegan"] = this.vegan;
        data["vege"] = this.vege;
        data["photo"] = this.photo;
        if (Array.isArray(this.ingredients)) {
            data["ingredients"] = [];
            for (let item of this.ingredients)
                data["ingredients"].push(item.toJSON());
        }
        return data;
    }
}

export interface IRecipeDto {
    id: string;
    recipeName?: string | undefined;
    instruction?: string | undefined;
    userId?: string | undefined;
    date: Date;
    rating: number;
    gluten: boolean;
    shellfish: boolean;
    eggs: boolean;
    fish: boolean;
    peanuts: boolean;
    soy: boolean;
    lactose: boolean;
    celery: boolean;
    mustard: boolean;
    sesame: boolean;
    sulphuR_DIOXIDE: boolean;
    lupine: boolean;
    muscles: boolean;
    vegan: boolean;
    vege: boolean;
    photo?: string | undefined;
    ingredients?: IndigrentsForRecipeDto[] | undefined;
}

export class IndigrentsForRecipeDto implements IIndigrentsForRecipeDto {
    recipeId!: string;
    ingredient?: string | undefined;

    constructor(data?: IIndigrentsForRecipeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.recipeId = _data["recipeId"];
            this.ingredient = _data["ingredient"];
        }
    }

    static fromJS(data: any): IndigrentsForRecipeDto {
        data = typeof data === 'object' ? data : {};
        let result = new IndigrentsForRecipeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["recipeId"] = this.recipeId;
        data["ingredient"] = this.ingredient;
        return data;
    }
}

export interface IIndigrentsForRecipeDto {
    recipeId: string;
    ingredient?: string | undefined;
}

export class UpdateRecipe implements IUpdateRecipe {
    token?: string | undefined;
    id!: string;
    recipeName?: string | undefined;
    instruction?: string | undefined;
    ifPublic!: boolean;
    ingredients2?: IngredientsDto[] | undefined;
    gluten!: boolean;
    shellfish!: boolean;
    eggs!: boolean;
    fish!: boolean;
    peanuts!: boolean;
    soy!: boolean;
    lactose!: boolean;
    celery!: boolean;
    mustard!: boolean;
    sesame!: boolean;
    sulphuR_DIOXIDE!: boolean;
    lupine!: boolean;
    muscles!: boolean;
    vegan!: boolean;
    vege!: boolean;

    constructor(data?: IUpdateRecipe) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
            this.id = _data["id"];
            this.recipeName = _data["recipeName"];
            this.instruction = _data["instruction"];
            this.ifPublic = _data["ifPublic"];
            if (Array.isArray(_data["ingredients2"])) {
                this.ingredients2 = [] as any;
                for (let item of _data["ingredients2"])
                    this.ingredients2!.push(IngredientsDto.fromJS(item));
            }
            this.gluten = _data["gluten"];
            this.shellfish = _data["shellfish"];
            this.eggs = _data["eggs"];
            this.fish = _data["fish"];
            this.peanuts = _data["peanuts"];
            this.soy = _data["soy"];
            this.lactose = _data["lactose"];
            this.celery = _data["celery"];
            this.mustard = _data["mustard"];
            this.sesame = _data["sesame"];
            this.sulphuR_DIOXIDE = _data["sulphuR_DIOXIDE"];
            this.lupine = _data["lupine"];
            this.muscles = _data["muscles"];
            this.vegan = _data["vegan"];
            this.vege = _data["vege"];
        }
    }

    static fromJS(data: any): UpdateRecipe {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRecipe();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        data["id"] = this.id;
        data["recipeName"] = this.recipeName;
        data["instruction"] = this.instruction;
        data["ifPublic"] = this.ifPublic;
        if (Array.isArray(this.ingredients2)) {
            data["ingredients2"] = [];
            for (let item of this.ingredients2)
                data["ingredients2"].push(item.toJSON());
        }
        data["gluten"] = this.gluten;
        data["shellfish"] = this.shellfish;
        data["eggs"] = this.eggs;
        data["fish"] = this.fish;
        data["peanuts"] = this.peanuts;
        data["soy"] = this.soy;
        data["lactose"] = this.lactose;
        data["celery"] = this.celery;
        data["mustard"] = this.mustard;
        data["sesame"] = this.sesame;
        data["sulphuR_DIOXIDE"] = this.sulphuR_DIOXIDE;
        data["lupine"] = this.lupine;
        data["muscles"] = this.muscles;
        data["vegan"] = this.vegan;
        data["vege"] = this.vege;
        return data;
    }
}

export interface IUpdateRecipe {
    token?: string | undefined;
    id: string;
    recipeName?: string | undefined;
    instruction?: string | undefined;
    ifPublic: boolean;
    ingredients2?: IngredientsDto[] | undefined;
    gluten: boolean;
    shellfish: boolean;
    eggs: boolean;
    fish: boolean;
    peanuts: boolean;
    soy: boolean;
    lactose: boolean;
    celery: boolean;
    mustard: boolean;
    sesame: boolean;
    sulphuR_DIOXIDE: boolean;
    lupine: boolean;
    muscles: boolean;
    vegan: boolean;
    vege: boolean;
}

export class IngredientsDto implements IIngredientsDto {
    ingredient?: string | undefined;

    constructor(data?: IIngredientsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ingredient = _data["ingredient"];
        }
    }

    static fromJS(data: any): IngredientsDto {
        data = typeof data === 'object' ? data : {};
        let result = new IngredientsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ingredient"] = this.ingredient;
        return data;
    }
}

export interface IIngredientsDto {
    ingredient?: string | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}